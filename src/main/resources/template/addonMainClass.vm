/*
* Zed Attack Proxy (ZAP) and its related class files.
*
* ZAP is an HTTP/HTTPS proxy for assessing web application security.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.zaproxy.zap.extension.${pack};
import org.apache.log4j.Logger;
import org.parosproxy.paros.Constant;
import org.parosproxy.paros.extension.ExtensionAdaptor;
import org.parosproxy.paros.extension.ExtensionHook;

public class ${name} extends ExtensionAdaptor {

    // The name is public so that other extensions can access it
    public static final String NAME = "${name}";

    // The i18n prefix, by default the package name - defined in one place to make it easier
    // to copy and change this example
    protected static final String PREFIX = "${pack}";

    private static final String RESOURCE = "/org/zaproxy/zap/extension/${pack}/resources";

    private static final Logger LOGGER = Logger.getLogger(${name}.class);

    public ${name}() {
        super(NAME);
    }

    @Override
    public void hook(ExtensionHook extensionHook) {
        super.hook(extensionHook);
    }

    @Override
    public boolean canUnload() {
    // The extension can be dynamically unloaded, all resources used/added can be freed/removed from core.
        return true;
    }

    @Override
    public void unload() {
        super.unload();

    // In this example it's not necessary to override the method, as there's nothing to unload
    // manually, the components added through the class ExtensionHook (in hook(ExtensionHook))
    // are automatically removed by the base unload() method.
    // If you use/add other components through other methods you might need to free/remove them
    // here (if the extension declares that can be unloaded, see above method).
    }

    @Override
    public String getAuthor() {
        return Constant.ZAP_TEAM;
    }

    @Override
    public String getDescription() {
        return Constant.messages.getString(PREFIX + ".desc");
    }

    @Override
    public URL getURL() {

        try {
            return new URL(Constant.ZAP_EXTENSIONS_PAGE);
        } catch (MalformedURLException e) {
            return null;
        }
    }

}